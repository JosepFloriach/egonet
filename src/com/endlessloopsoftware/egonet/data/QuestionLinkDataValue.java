/*
 * Generated by XDoclet - Do not edit!
 */
package com.endlessloopsoftware.egonet.data;

/**
 * Value object for QuestionLinkEJB.
 *
 * Notice, this object is used to represent the state of an 
 * QuestionLinkEJB object. This value object
 * Is not connected to the database in any way, it is just a normal object used 
 * as a container for data from an EJB. 
 *
 */
public class QuestionLinkDataValue
   extends java.lang.Object
   implements java.io.Serializable, java.lang.Cloneable 
{

   private java.lang.String id;
   private boolean idHasBeenSet = false;

   private java.lang.Long questionId;
   private boolean questionIdHasBeenSet = false;

   private int answerValue;
   private boolean answerValueHasBeenSet = false;

   private java.lang.String answerString;
   private boolean answerStringHasBeenSet = false;

   private boolean active;
   private boolean activeHasBeenSet = false;

   private com.endlessloopsoftware.egonet.interfaces.QuestionLinkEJBPK primaryKey;

   public QuestionLinkDataValue()
   {
	  primaryKey = new com.endlessloopsoftware.egonet.interfaces.QuestionLinkEJBPK();
   }

   public QuestionLinkDataValue( java.lang.String id,java.lang.Long questionId,int answerValue,java.lang.String answerString,boolean active )
   {
       setId(id);
       setQuestionId(questionId);
       setAnswerValue(answerValue);
       setAnswerString(answerString);
       setActive(active);
       primaryKey = new com.endlessloopsoftware.egonet.interfaces.QuestionLinkEJBPK(this.getId());
   }

   /**
    * @deprecated use {@link #clone}
    */
   public QuestionLinkDataValue( QuestionLinkDataValue otherValue )
   {
	  this.id = otherValue.id;
	  idHasBeenSet = true;
	  this.questionId = otherValue.questionId;
	  questionIdHasBeenSet = true;
	  this.answerValue = otherValue.answerValue;
	  answerValueHasBeenSet = true;
	  this.answerString = otherValue.answerString;
	  answerStringHasBeenSet = true;
	  this.active = otherValue.active;
	  activeHasBeenSet = true;

	  primaryKey = new com.endlessloopsoftware.egonet.interfaces.QuestionLinkEJBPK(this.getId());
   }

   public com.endlessloopsoftware.egonet.interfaces.QuestionLinkEJBPK getPrimaryKey()
   {
	  return primaryKey;
   }

   public void setPrimaryKey( com.endlessloopsoftware.egonet.interfaces.QuestionLinkEJBPK primaryKey)
   {
      // it's also nice to update PK object - just in case
      // somebody would ask for it later...
      this.primaryKey = primaryKey;
	  setId( primaryKey.id );
   }

   public java.lang.String getId()
   {
	  return this.id;
   }

   public void setId( java.lang.String id )
   {
	  this.id = id;
	  idHasBeenSet = true;

      primaryKey.setId(id);
   }

   public boolean idHasBeenSet(){
	  return idHasBeenSet;
   }
   public java.lang.Long getQuestionId()
   {
	  return this.questionId;
   }

   public void setQuestionId( java.lang.Long questionId )
   {
	  this.questionId = questionId;
	  questionIdHasBeenSet = true;

   }

   public boolean questionIdHasBeenSet(){
	  return questionIdHasBeenSet;
   }
   public int getAnswerValue()
   {
	  return this.answerValue;
   }

   public void setAnswerValue( int answerValue )
   {
	  this.answerValue = answerValue;
	  answerValueHasBeenSet = true;

   }

   public boolean answerValueHasBeenSet(){
	  return answerValueHasBeenSet;
   }
   public java.lang.String getAnswerString()
   {
	  return this.answerString;
   }

   public void setAnswerString( java.lang.String answerString )
   {
	  this.answerString = answerString;
	  answerStringHasBeenSet = true;

   }

   public boolean answerStringHasBeenSet(){
	  return answerStringHasBeenSet;
   }
   public boolean getActive()
   {
	  return this.active;
   }

   public void setActive( boolean active )
   {
	  this.active = active;
	  activeHasBeenSet = true;

   }

   public boolean activeHasBeenSet(){
	  return activeHasBeenSet;
   }

   public String toString()
   {
	  StringBuffer str = new StringBuffer("{");

	  str.append("id=" + getId() + " " + "questionId=" + getQuestionId() + " " + "answerValue=" + getAnswerValue() + " " + "answerString=" + getAnswerString() + " " + "active=" + getActive());
	  str.append('}');

	  return(str.toString());
   }

   /**
    * A Value Object has an identity if the attributes making its Primary Key have all been set. An object without identity is never equal to any other object.
    *
    * @return true if this instance has an identity.
    */
   protected boolean hasIdentity()
   {
	  boolean ret = true;
	  ret = ret && idHasBeenSet;
	  return ret;
   }

   /**
    *
    * @deprecated use {@link #equals}
    */
   public boolean isIdentical(Object other)
   {
          if (other instanceof QuestionLinkDataValue)
          {
                 QuestionLinkDataValue that = (QuestionLinkDataValue) other;
                 boolean lEquals = true;
                 if( this.questionId == null )
                 {
                        lEquals = lEquals && ( that.questionId == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.questionId.equals( that.questionId );
                 }
                 lEquals = lEquals && this.answerValue == that.answerValue;
                 if( this.answerString == null )
                 {
                        lEquals = lEquals && ( that.answerString == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.answerString.equals( that.answerString );
                 }
                 lEquals = lEquals && this.active == that.active;

                 return lEquals;
          }
          else
          {
                 return false;
          }
   }

    public boolean equals(Object other) {

        //If it's not the correct type, clearly it isn't equal to this.
        if (!(other instanceof QuestionLinkDataValue)) { 
            return false;
        }

        return equals((QuestionLinkDataValue) other);
    }

    /**
     * This class is not using strict ordering. This means that the object is not Comparable, and
     * each check for equality will test all members for equality. We do not check collections for
     * equality however, so you would be wise to not use this if you have collection typed EJB References.
     */
    public boolean equals(QuestionLinkDataValue that) {

        //try to get lucky.
        if (this == that) {
            return true;
        }
        //this clearly isn't null.
        if(null == that) {
            return false;
        }

        if(this.id != that.id) {

            if( this.id == null || that.id == null ) {
                return false;
            }

            if(!this.id.equals(that.id)) {
                return false;
            }

        }

        if(this.questionId != that.questionId) {

            if( this.questionId == null || that.questionId == null ) {
                return false;
            }

            if(!this.questionId.equals(that.questionId)) {
                return false;
            }

        }

        if(this.answerValue != that.answerValue) {
            return false;
        }

        if(this.answerString != that.answerString) {

            if( this.answerString == null || that.answerString == null ) {
                return false;
            }

            if(!this.answerString.equals(that.answerString)) {
                return false;
            }

        }

        if(this.active != that.active) {
            return false;
        }

        return true;

    }

    public Object clone() throws java.lang.CloneNotSupportedException {
        QuestionLinkDataValue other = (QuestionLinkDataValue) super.clone();

        return other;
    }

    public ReadOnlyQuestionLinkDataValue getReadOnlyQuestionLinkDataValue() {
        return new ReadOnlyQuestionLinkDataValue();
    }

    public int hashCode(){
	  int result = 17;
      result = 37*result + ((this.id != null) ? this.id.hashCode() : 0);

      result = 37*result + ((this.questionId != null) ? this.questionId.hashCode() : 0);

      result = 37*result + (int) answerValue;

      result = 37*result + ((this.answerString != null) ? this.answerString.hashCode() : 0);

      result = 37*result + (active ? 0 : 1);

	  return result;
    }

    /**
     * Covariant function so the compiler can choose the proper one at compile time,
     * eliminates the need for XDoclet to really understand compiletime typing.
     *
     * Read only collections need to be synchronized. Once we start giving out handles
     * to these collections, they'll be used in other threads sooner or later. 
     */
    private static java.util.Collection wrapCollection(java.util.Collection input) {
        return java.util.Collections.synchronizedCollection(input);
    }
    /**
     * Covariant function so the compiler can choose the proper one at compile time,
     * eliminates the need for XDoclet to really understand compiletime typing.
     *
     * Read only collections need to be synchronized. Once we start giving out handles
     * to these collections, they'll be used in other threads sooner or later. 
     */
    private static java.util.Set wrapCollection(java.util.Set input) {
        return java.util.Collections.synchronizedSet(input);
    }
    /**
     * Covariant function. This is used in covariant form so that the compiler
     * can do some of our conditional branches for us. If I made these functions
     * have different names, then XDoclet would have to choose between them based on 
     * compiletime types, that wouldn't be easy. 
     */
    private static java.util.Collection wrapReadOnly(java.util.Collection input) {
        return java.util.Collections.unmodifiableCollection(input);
    }
    /**
     * Covariant function. This is used in covariant form so that the compiler
     * can do some of our conditional branches for us. If I made these functions
     * have different names, then XDoclet would have to choose between them based on 
     * compiletime types, that wouldn't be easy. 
     */
    private static java.util.Set wrapReadOnly(java.util.Set input) {
        return java.util.Collections.unmodifiableSet(input);
    }

    private final class ReadOnlyQuestionLinkDataValue 
    implements java.lang.Cloneable, java.io.Serializable 
    {
        private QuestionLinkDataValue underlying() {
            return QuestionLinkDataValue.this;
        }

       public java.lang.String getId() {
              return underlying().id;
       }

       public java.lang.Long getQuestionId() {
              return underlying().questionId;
       }

       public int getAnswerValue() {
              return underlying().answerValue;
       }

       public java.lang.String getAnswerString() {
              return underlying().answerString;
       }

       public boolean getActive() {
              return underlying().active;
       }

        public int hashCode() {
            return 101 * underlying().hashCode();
        }

        public boolean equals(Object o) {
            if(o instanceof ReadOnlyQuestionLinkDataValue) {
                return this.equals((ReadOnlyQuestionLinkDataValue) o);
            }
            return false;
        }

        public boolean equals(ReadOnlyQuestionLinkDataValue that) {
            if(null == that) {
                return false;
            }

            return this.underlying().equals(that.underlying());
        }

    }

}
